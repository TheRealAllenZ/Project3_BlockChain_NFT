pragma solidity ^0.5.0;
    
contract RenterRoles {
  event RoleCreated(uint256 role);
  event BearerAdded(address owner, uint256 role);
  event BearerRemoved(address owner, uint256 role);
 // Role => person address => exists
  mapping(string => mapping(address => bool)) private  roles;
  //role => count
  mapping(string => uint) private roleCount;
  constructor() public {
  }
 function addBearer(string calldata role, address person )    external {
    if (!roles[role][person] )
    {
        roles[role][person] = true;
        roleCount[role] += 1;
    }
  }
  function hasRole(address person, string calldata role)
    external
    view
    returns(bool)
  {
    return roles[role][person];
  }
  function removeBearer(address person, string calldata role)
    external
  {
        roles[role][person] = false;
        delete roles[role][person];
  }
}
